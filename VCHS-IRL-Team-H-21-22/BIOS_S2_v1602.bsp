' {$STAMP BS2P}
' {$PBASIC 2.5}
' {$PORT  COM5}


version  CON 1602

'**********************
'   Slot 2
'**********************

'
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'XXXXXXXX >>  Start Here to Copy Header entries  <<  XXXXXXXXXXXXXXXXXX
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'
                       'S0 contains the timing loop
                       'S2 contains the event table AND actions.
                       'S1 contains test code placeholder
'
' 2012
' 1. added test for payload interface boards
' 2. clean slot 0, added time 0,1,2 for clock speed
'
'******************  Start of System Global lables *******************
'     Conditional Assemblies
'
#DEFINE FlyConfig = 1            '1=Set to Flight Configuration, 0=Test Configuration
#DEFINE fastclock = 0            '0=Normal Time X1, 1=Medium Time ~X17 2=Fast Time ~X60
#DEFINE testreset = 1              '1=test reset and reset count
#DEFINE SaySlot   = 1              '1=Say Slot with vector
#DEFINE Sayit = 1                  '1=Say what is happening
#DEFINE nodebug = 1                '1= nodebug outputs
#DEFINE MasterEnabled = 1          '1= enable checking for master input
'
'
'***************************************************************************************
'********* EEPROM Data Storage Area ****************************************************
'Start storage at top of slot6 and work downwards, code can go in slot 4, but be carful
'not to overwrite the data storage.  Programs go from botton to top, Data storage, and
'our data storage allocations are from the top down.  MUST BE CHECKED MANUALLY, program
'does not know any better.
'***************************************************************************************
'
DataStorage    CON 4                'EEROM data is storaged in Slot 4
'
'
'Data storage is defined at the end of this slot (slot 4), the spaces and address must match up with
'the lables defined here which will be used across all slots, be careful in defining this
'
Cstatus             CON 0                    '00 See data at data storage area
TestNumber          CON Cstatus+1            'Test Sequence Counter  1112
ResetNumber         CON TestNumber+2         '00 Number of times reset sence downloaded
IDcodefile          CON ResetNumber+1        'MicroLab alpha ID  2 ascii values
LastPhoto           CON IDcodefile+2         '00000 Photo number  5 ascii values
LastBKupload        CON LastPhoto+5          'Number of the last command file uploaded
NextBktoLoad        CON LastBKupload+1       'NextBktoLoad       next bank to load
LastuploadCommand   CON NextBktoLoad+1       'LastuploadCommand   Number of the last command file uploaded
Missionsec          CON LastuploadCommand+2  'Missionsec          clock sec count here 0-59
Missionmin          CON Missionsec+1         'Missionmin          clock min count here 0-59
Missionhour         CON Missionmin+1         'Missionhour         lock hour count here 0-23
Missionday          CON Missionhour+1        'Missionday          lock day count here 0-xx
TempStatus          CON Missionday+1         'Temp storage for test status routines
'
'     'ETC....
'
'**********************************************************************
'******** Scrathpad Ram Defined Ram location across all slots *********
'**********************************************************************
'
ScratchRam     CON 0                  'start of Scratch ram locations bytes
'
'----- Bios and User Scratch pad memory locations -----------------------------
'
Resetverify    CON ScratchRam         'location is 0 on Power on Reset or not Zero for slot return
VectorFromSlot CON Resetverify+1      'Slot to return to - who called the program vector
VectorFromNum  CON VectorFromSlot+1   'From Vector number within slot place to Return to
SlotErrReturn  CON VectorFromNum+1    'Error code return from Slot program run
'
sMissionday     CON SlotErrReturn+1     'BIOS Mission clock day count here 0-xx
sMissionhour    CON sMissionday+1       'BIOS Mission clock hour count here 0-23
sMissionmin     CON sMissionhour+1      'BIOS Mission clock min count here 0-59
sMissionsec     CON sMissionmin+1       'BIOS Mission clock sec count here 0-59
'
'---------- Bios provided data for user -----------------------------------------
'
RTCsec         CON sMissionsec+1      'BIOS Real Time clock sec count here 0-59
RTCmin         CON RTCsec+1           'BIOS Real Time clock min count here 0- 59
RTChour        CON RTCmin+1           'BIOS Real Time Clock hour count here 0-23
RTCday         CON RTChour+1          'BIOS Real Time clock day count here 1-31
RTCmonth       CON RTCday+1           'BIOS Real Time clock month count here 1-12
RTCyear        CON RTCmonth+1         'BIOS Real Time clock year count here 0-99
'
AmbTemperature     CON  RTCyear+1             'BIOS Ambient temperature in celcius (8 low bits of 10 bits)
AmbTemperaturehigh CON  AmbTemperature+1      'BIOS Ambient temperature in celcius (2 high bits of 10 bits)
AmbHumidity        CON  AmbTemperaturehigh+1  'BIOS Ambient Humidity  (8 low bits of 10 bits)
AmbHumidityhigh    CON  AmbHumidity+1         'BIOS Ambient Humidity  (2 high bits of 10 bits)
'
A2Dchannel0        CON  AmbHumidityhigh+1     'BIOS Analog channel 0, (8 bits 0f 0v to 2.5v low-> high)
A2Dchannel0high    CON  A2Dchannel0+1         'BIOS Analog channel 0, (2 bits 0f 0v to 2.5v low-> high)
A2Dchannel1        CON  A2Dchannel0high+1     'BIOS Analog channel 1, (8 bits 0f 0v to 2.5v low-> high)
A2Dchannel1high    CON  A2Dchannel1+1         'BIOS Analog channel 1, (2 bits 0f 0v to 2.5v low-> high)
A2Dchannel2        CON  A2Dchannel1high+1     'BIOS Analog channel 2, (8 bits 0f 0v to 2.5v low-> high)
A2Dchannel2high    CON  A2Dchannel2+1         'BIOS Analog channel 2, (2 bits 0f 0v to 2.5v low-> high)
A2Dchannel3        CON  A2Dchannel2high+1     'BIOS Analog channel 3, (8 bits 0f 0v to 2.5v low-> high)
A2Dchannel3high    CON  A2Dchannel3+1         'BIOS Analog channel 3, (2 bits 0f 0v to 2.5v low-> high)
InternTemp         CON  A2Dchannel3high+1     'Bios internal temp of msp430- Needs Calibration
InternTemphigh     CON  InternTemp+1          'Bios internal temp of msp430- Needs Calibration
VCCby2             CON  InternTemphigh+1      'Bios VCC/2 for calabration - Regulator check
VCCby2high         CON  VCCby2+1              'Bios VCC/2 for calabration - Regulator check
'
'----------- Bios Reserved working registers ----------------------------------------
'
CameraRes       CON  VCCby2high+1     'Name this Bios Register (camera Resolution 320 $05 640 $07)
CameraQua       CON  CameraRes+1      'Name this Bios Register (Camera quality $02 normal, $01 Better, $00 Best)
SlaveErr        CON  CameraQua+1      'slave MSP430 status byte (Local Slave Status)
ActiveBank      CON  SlaveErr+1       'Name this Bios Register (Active bank)
TextPointer     CON ActiveBank+1      'Name 16 bit pointer to text in active bank
'
'MicroLab Bios Status Byte given to Master on Status Request
'  Location and Bits defined
'
MLabStatus     CON  TextPointer+2     'Current Status of MicroLab
HighPower      CON  $80               '  Bit 7=high power request
ExComplete     CON  $40               '  Bit 6 = execution of upload command completed
                                      '  Bit 5,4,3, don't care
B2ready        CON  $04               '  Bit 2 = bank 2 ready for upload
B1ready        CON  $02               '  Bit 1 = bank 1 ready for upload
B0ready        CON  $01               '  Bit 0 = bank 0 ready for upload
'
'MicroLab Power Status Registers
'                                      '
PowerStatus    CON  MLabStatus+1      'Power control value
P300ma         CON  $80               'enable high power 300ma mode
P75ma          CON  $40               'set to 75ma power usage
P50ma          CON  $20               'set to low power 50ma
P100ma         CON  $00               'default value of power 100ma
'
'Reserved Bios Working Registers
'
BiosWord0      CON  PowerStatus+1     'BIOS Reserved Word for Bios operations
BiosWord0h     CON  BiosWord0+1       '
BiosWord1      CON  BiosWord0h+1      'BIOS Reserved Word for Bios operations
BiosWord1h     CON  BiosWord1+1       '
BiosWord2      CON  BiosWord1h+1      'BIOS Reserved Word for Bios operations
BiosWord2h     CON  BiosWord2+1       'BIOS Reserved Word for Bios operations
BiosWord3      CON  BiosWord2h+1      'BIOS Reserved Word for Bios operations
BiosWord3h     CON  BiosWord3+1       'BIOS Reserved Word for Bios operations
'
'-----------General Purpose registers across Slots--------------------------------------
'
scr_Register0  CON BiosWord3h+1       'General use Scratchpad Ram location across all slots
scr_Register1  CON scr_Register0+1    'General use Scratchpad Ram location across all slots
scr_Register2  CON scr_Register1+1    'General use Scratchpad Ram location across all slots
scr_Register3  CON scr_Register2+1    'General use Scratchpad Ram location across all slots
scr_Register4  CON scr_Register3+1    'General use Scratchpad Ram location across all slots
scr_Register5  CON scr_Register4+1    'General use Scratchpad Ram location across all slots
scr_Register6  CON scr_Register5+1    'General use Scratchpad Ram location across all slots
scr_Register7  CON scr_Register6+1    'General use Scratchpad Ram location across all slots
'
'--------- Location for Saved User Variables -----------------------------------------
'
Reg0low    CON       scr_Register7+1   'Storage of user variables during Bios operations
Reg0high   CON       Reg0low+1         'Storage of user variables during Bios operations
Reg1low    CON       Reg0high+1        'Storage of user variables during Bios operations
Reg1high   CON       Reg1low+1         'Storage of user variables during Bios operations
Reg2low    CON       Reg1high+1        'Storage of user variables during Bios operations
Reg2high   CON       Reg2low+1         'Storage of user variables during Bios operations
Reg3low    CON       Reg2high+1        'Storage of user variables during Bios operations
Reg3high   CON       Reg3low+1         'Storage of user variables during Bios operations
Reg4low    CON       Reg3high+1        'Storage of user variables during Bios operations
Reg4high   CON       Reg4low+1         'Storage of user variables during Bios operations
Reg5low    CON       Reg4high+1        'Storage of user variables during Bios operations
Reg5high   CON       Reg5low+1         'Storage of user variables during Bios operations
Reg6low    CON       Reg5high+1        'Storage of user variables during Bios operations
Reg6high   CON       Reg6low+1         'Storage of user variables during Bios operations
Reg7low    CON       Reg6high+1        'Storage of user variables during Bios operations
Reg7high   CON       Reg7low+1         'Storage of user variables during Bios operations
Reg8low    CON       Reg7high+1        'Storage of user variables during Bios operations
Reg8high   CON       Reg8low+1         'Storage of user variables during Bios operations
Reg9low    CON       Reg8high+1        'Storage of user variables during Bios operations
Reg9high   CON       Reg9low+1         'Storage of user variables during Bios operations
Reg10low   CON       Reg9high+1         'Storage of user variables during Bios operations
Reg10high  CON       Reg10low+1         'Storage of user variables during Bios operations
Reg11low   CON       Reg10high+1        'Storage of user variables during Bios operations
Reg11high  CON       Reg11low+1         'Storage of user variables during Bios operations
Reg12low   CON       Reg11high+1        'Storage of user variables during Bios operations
Reg12high  CON       Reg12low+1         'Storage of user variables during Bios operations
'
'
MoprClk0  CON        Reg12high+1        'Mission Operations Clock0, fail safe operations
MoprClk1  CON        MoprClk0+2         'Mission Operations Clock1, fail safe operations
MoprClk2  CON        MoprClk1+2         'Mission Operations Clock1, fail safe operations
MoprClk3  CON        MoprClk2+2         'Mission Operations Clock1, fail safe operations
'
'
NextAvailiable CON MoprClk3+2          'Next Availiable location for scratch pad ram storage
'
'-------   User Scratchpad Locations open for use -------------
'
'
'
'-------   User Scratchpad Locations open for use -------------  '
'
SlotInfo    CON 127                    'contains the current running slot.
'
'location number 127 contains the number of the currently running program slot
'
'************* End of Scratchpad Ram Space difinations ****************
'
'**********************************************************************
'----- MicroLab Pins and ports on the BS2p24 Defined for BIOS ------------
'**********************************************************************
internalscl       CON 0       'BS2p24 interal I2c buss
internalsda       CON 1       'BS2p24 interal I2c buss
cameraclk         CON 2       'Camera Clock
cameramiso        CON 3       'Camera master in slave out
cameramosi        CON 4       'Camera msater out slave in
camerahold        CON 5       'Camera Hold
masterin          PIN 6       'Serial Input fm master
'masterin          CON 6       'Serial Input fm master
masterout         CON 7       'Serial Output to master
payloadsda        CON 8       'SDA on payload expansion board
payloadscl        CON 9       'SCL on payload expansion board
internawin        CON 10      'Local slave A to D, watchdog serial in
internawout       CON 11      'Loacl slave A to D, watchdog serial out
camerapower       CON 12      'Camera on and off for recycle
votedead          CON 13      'AMicroLab vote that Master is dead
payloadio14       CON 14      'I/O payload line
cameraCS          CON 15      'camrea chip select pin
'
'
'---------------- Bios System General constants --------------------
'
' Input terminal constants for test set to
con_in       CON 16          'Pin 16 is BS2P serial in from RS232 connector
con_baud     CON 240         'set to 9600 8bit true
con_tout     CON 250         'time out waiting for terminal input appx 100ms
'
'----------------- Bios General constants ---------------------------
'
InternI2c          CON      0          'Internal I2C buss address control
PLi2c              CON      8          'Payload I2c BUSS address control
PCF8574address     CON      $40        'internal I2C buss address of PFC8574
Ebankaddress       CON      $A0        'Address of 256k eerom memory
Ebank0             CON      $00        'Ebank0 bank address 00000-0FFFF
Ebank1             CON      $02        'Ebank1 bank address 10000-1FFFF
Ebank2             CON      $04        'Ebank2 bank address 20000-2FFFF
Ebank3             CON      $06        'Ebank3 bank address 30000-3FFFF
'
TextBuffer         CON      $C000      'Text buffer in bank 0,1, and 2
'
Camera320          CON      $05        'Camera Resolution 320X240
Camera640          CON      $07        'Camera Resolution 640X480
CameraNormal       CON      $02        'Camera Quality Normal
CameraBetter       CON      $01        'Camera Quality Better
CameraBest         CON      $00        'Camera Quality Best
'
Baud9600T CON $00F0  'Baudrate of 9600 no parity True
Baud2400T CON $03FD  'Baudrate of 2400 no parity true
'
Ack       CON $5A                      'Acknowledge response to McMek
TimeOut   CON 500                      'input command timeout is .5 seconds
Pace      CON 1                        'pace of output from MicroLab to System terminal
ETX       CON $03                      'End of Text command
EOF       CON $FF                      'end of file marker
'
'------------ Bios System Error and event codes for logging --------------------
'
NoError       CON   0       'no error on return, all ok
'
'-----------------  Variables Same for all program Slots  ---------------
'  Used By BIOS
xcounter    VAR Word         'General use 16 bit counter
TempWord    VAR Word         'General use Temp Word Register
TempWord1   VAR Word         'General use Temp Word Register
counter     VAR Byte         'General use 8 bit counter
TempReg0    VAR Byte         'General use location for values during processes
TempReg1    VAR Byte         'General use location for values during processes
TempReg2    VAR Byte         'General use location for values during processes
TempReg3    VAR Byte         'General use location for values during processes
Sdata       VAR Byte         'data to send to uart
text        VAR Byte(8)      'make array for text
'
'  Variables open for use by User (9 Bytes)and not touched by the BIOS
'  Note: above BIOS Variables can/may be used by the user, however
'  the value may be destroyed by a Call to the BIOS or BIOS operation
'
UserVar0    VAR Byte         'user Varible space - Should be same across all slots
UserVar1    VAR Byte         'user Varible space - Should be same across all slots
UserVar2    VAR Byte         'user Varible space - Should be same across all slots
UserVar3    VAR Byte         'user Varible space - Should be same across all slots
UserVar4    VAR Byte         'user Varible space - Should be same across all slots
UserVar5    VAR Byte         'user Varible space - Should be same across all slots

'
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' Calibration values must be calculated and writen through the test system write eeram
' not automatically done, this is a one time event. Calibrate CPU temp, may be as
' much as 60 degrees C off from the factory.
'
SysCalBank   CON   Ebank3   'Bank for system calibration
SysCPUcal    CON   $C002    'External E2RAM calibration locations
'
'
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'XXXXXXXXXXXXXXXXXXXXX  >> End of Header Copy Entries  <<  XXXXXXXXXXXXXXXXXXXXXXX
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'
'*************************************************************************
'   Enter with TempReg1 containing the program index to run in this slot
'*************************************************************************
  '
  #IF SaySlot = 1 #THEN
  DEBUG ">S2-V",DEC TempReg1,CR
  #ENDIF
  BRANCH TempReg1,[EventTable,         '0 Event Table
  TakePhotoReturn,                     '1 vector to this program
  P2vector,                            '2 vector to this program
  P3vector]                            '3 vector to this program
  '

'*************************************************************************
'   To Run program in another slot Set TempReg1 to the vector index of
'   that program within the target slot then "RUN" that slot,  If a return
'   to originating slot is desired then the return vector index must be stored
'   in the VectorFromNum location in the scratch pad memory,  and the return
'   slot is stored in the VectorFromSlot scratch pad memory.  Then a general
'   routine can be used to return to the originating program.
'*************************************************************************
  '
InSlot  CON    2               'Define this slot, each slot is numbered
  '
  '***********************************************************************
  '       To go to a slot and set a return
  'TempReg0 = Returning vector index
  'TempReg1 = vector index to run in next slot
  'TempReg3 = the slot number to go to
  '**********************************************************************
  '
GotoSlot:
  PUT VectorFromNum,TempReg0     'this is the vector when returning back to this slot
  PUT VectorFromSlot,InSlot      'To vector back to this Slot
  RUN TempReg3
  '
  '
  '***************************************************************************
  'When returning back, Set TempReg1 to the return vector in the calling slot
  'get the returning slot and RUN that slot
  '***************************************************************************
  '
ReturnBack:
  GET VectorFromNum,TempReg1     'fetch the vector to run when returning to calling slot
  GET VectorFromSlot,TempReg0    'fetch the program slot where the routine was called
  RUN TempReg0                   'RETURNback now....!!!!
  '

  '
  '
  '
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'XXXXXXXXXXXXXXXXXXXX   Programs in this slot  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'

    '======================================================================
 EventTable:
  TagCnt    CON 0     'hard coded Slot 0 program memory data addresses
  DurMin    CON 1
  DurHour   CON 2
  DurDay    CON 3

  STORE 0
  READ DurMin,UserVar0
  READ DurHour,UserVar1
  READ DurDay,UserVar2
  DEBUG CR,"Event table received (H D M):",DEC uservar2," ",DEC uservar1," ",DEC uservar0,CR,CR

  'READ Missionmin,UserVar0   'Copy Mission Clock to RAM
  'READ Missionhour,UserVar1
  'READ Missionday,UserVar2
  UserVar3 = 0 'Set EventByte to default "no event"

 STORE 2      'Event Table is stored in this slot
  FOR TempReg0 = 0 TO 40
    READ ETable+TempReg0*5+0,TempReg1 : IF TempReg1 <> UserVar2 THEN GOTO NextRow  'Check Day
    READ ETable+TempReg0*5+1,TempReg1 : IF TempReg1 <> UserVar1 THEN GOTO NextRow 'Check Hour
    READ ETable+TempReg0*5+2,TempReg1 : IF TempReg1 <> UserVar0 THEN GOTO NextRow 'Check Min
    READ ETable+TempReg0*5+3,TempReg1 : IF TempReg1 <> $ff      THEN GOTO NextRow 'Execute if $ff
    READ ETable+TempReg0*5+4,UserVar3    'Write Event Number to UserVar3

    'STORE 4 : READ Missionsec,UserVar0  :STORE 2  'Read latest seconds
    'DEBUG CR,"missionSec = ",DEC uservar0,CR
    WRITE ETable+TempReg0*5+3,UserVar0  : UserVar0=UserVar0+1  'Tag Event, increment tag count **
    STORE 0 : WRITE TagCnt,UserVar0                            'update TagCnt      *****
    GOTO FoundEvent
NextRow:NEXT
  STORE datastorage
  GOTO ReturnBack

FoundEvent:

  'DEBUG CR,"found event: ",DEC UserVar3

  STORE DataStorage ' return storage pointer to Slot 4
  DEBUG CR, "Dump Etable FOR DEBUG "
  STORE 2
  FOR TempReg0 = 0 TO 40
    DEBUG CR,"Event Table Row ",DEC TempReg0,":  "
    READ ETable+TempReg0*5+0,TempReg1 : DEBUG DEC TempReg1,"  "
    READ ETable+TempReg0*5+1,TempReg1 : DEBUG DEC TempReg1,"  "
    READ ETable+TempReg0*5+2,TempReg1 : DEBUG DEC TempReg1,"  "
    READ ETable+TempReg0*5+3,TempReg1 : DEBUG HEX TempReg1,"  "
    READ ETable+TempReg0*5+4,TempReg1 : DEBUG DEC TempReg1,"  "
  NEXT
  DEBUG CR,"End of Table",CR

  STORE DataStorage
' Feel free to change the event names to actions, or keep it as 1,2,3,4. This is preference.
  BRANCH UserVar3,
  [Event0_NOTHING,                     'Event 0 (do nothing)
   Event1_PICTURE,                     'Event 1 (take photo)
   Event2_MEASURE,                    'Event 2 (measure j seconds)
   Event3_OSCILLATOR,                  'Event 7 (turn on oscillator)
   Event4_RESET_TIME,                   ' loop back to 0
   Event5_SET_CONFIG]                    ' set the time variable




' If BRANCHing with UserVar3 isn't working, then it will fall through to this:
  UserVar3 = 0                 'Error
  DEBUG CR,"Event Byte is out of range",CR
  GOTO ReturnBack              'back to calling routine




'
' 0 = on 1 = off
'
' 0 and 2 = chamber
' 4 = LED
' 6 and 7 = oscillator
' microswitch?

' ----------------------------------------------------------------------------------------------------
'                                              EVENTS
' ----------------------------------------------------------------------------------------------------
Event0_NOTHING: DEBUG CR, "Nothing", CR
  I2COUT InternI2c, PCF8574Address, [%11111111] ' everything off
                                                     ' Event 0 (Nothing)
  tempReg0 = 4
  RUN 0


Event1_PICTURE: DEBUG CR,"Take Picture/LED",CR                                                                     ' Event 1 (Photo)
  I2COUT InternI2c, PCF8574Address, [%11101111]
'   Take a High Resolution Photo of the Chamber
  PUT    CameraRes,Camera640        'Template default
  PUT    CameraQua,CameraNormal     'set to Normal
  PUT VectorFromSlot,2              'Return Slot
  PUT VectorFromNum,1               'Return Index
  TempReg1 = 1                      'Destination Index
  TempReg3 = 6                      'Destination Slot
  RUN 6                             'Execute a slot goto proceedure now do it


' After taking the photo, it goes to this function:
TakePhotoReturn:
  I2COUT InternI2c, PCF8574Address, [%00111111]
  'DEBUG CR, "HELLO I TOOK A PHOTO GUYS", CR
  TempWord = $FFFF
  GOSUB WriteWordHex
  tempReg0 = 4 'Destination Index (EventTableReturn)
  RUN 0        'Destination Slot



Event2_MEASURE: DEBUG CR, "Turn on current across electrodes", CR      ' Event 2 (measure j seconds)
  I2COUT InternI2c, PCF8574Address, [%11010000] ' turn on everything but oscillator and LED
  DEBUG CR, "UserVar5=", DEC UserVar5, CR
  FOR UserVar2 = 1 TO 30:
    GOSUB INA219_test
    'TempWord = UserVar5     ' comment out for testing
    'GOSUB WriteWordHex
    IF UserVar5 = 0 THEN
      PAUSE 500
    ELSEIF UserVar5 = 1 THEN
      PAUSE 1000
    ELSEIF UserVar5 = 2 THEN
      PAUSE 1500
    ELSEIF UserVar5 = 3 THEN
      PAUSE 3000
    ELSEIF UserVar5 = 4 THEN
      PAUSE 8000
    ENDIF
  NEXT
  UserVar5 = (UserVar5 + 1) // 5
  GOSUB Event1_PICTURE


Event3_OSCILLATOR: DEBUG CR, "Turn on Oscillator", CR
  I2COUT InternI2c, PCF8574Address, [%00111111]                                                                  ' Event 3 (oscillator)
  tempReg0 = 4
  RUN 0



Event4_RESET_TIME: DEBUG CR, "Resetting time", CR                                                                ' Event 4 (reset time)
  STORE 0
  WRITE DurDay, 00
  WRITE DurHour,23
  WRITE DurMin, 59
  STORE 2
  FOR tempReg0 = 2 TO 28
    WRITE Etable+(tempReg0*5)+3, $FF 'reset the tags
  NEXT
  STORE DataStorage
  tempReg0 = 4 'Destination Index (EventTableReturn)
  RUN 0        'Destination Slot

Event5_SET_CONFIG: DEBUG CR, "Setting UserVar5 to 0", CR
  UserVar5 = 0
  tempReg0 = 4
  RUN 0

' ----------------------------------------------------------------------------------------------------




  '
  '======================================================================
P1vector:  GOTO ReturnBack      'back to calling routine
    '======================================================================
P2vector:  GOTO ReturnBack      'back to calling routine
    '======================================================================
P3vector:  GOTO ReturnBack      'back to calling routine



         '    Day  Hour  Min   Tag  EventByte
 ETable DATA  00,  00,   00,   $FF,    00  'Row 0  Do Nothing

      '  DATA  00,  00,   01,   $FF,    05    ' TEST set config
       ' DATA  00,  00,   02,   $FF,    02    ' TEST measure electrolysis
        'DATA  00,  00,   03,   $FF,    01    ' TEST photo again
        'DATA  00,  00,   04,   $FF,    02    ' TEST eloctroslysis again
        ' DATA  00,  00,   05,   $FF,    01    ' TEST photo again               ' 4 photos in total

        DATA  00,  13,   00,   $FF,    05  'Row 1  Set config

        DATA  01,  00,   00,   $FF,    01  'Row 2  Take photo
        DATA  01,  00,   15,   $FF,    02  'Row 3  Turn on and Measure current for x seconds (take photo)
        DATA  01,  00,   25,   $FF,    03  'Row 4  Turn on oscillator
        DATA  01,  01,   00,   $FF,    01  'Row 5  Take photo
        DATA  01,  02,   00,   $FF,    01  'Row 6  Take photo
        DATA  01,  03,   00,   $FF,    01  'Row 7  Take photo
        DATA  01,  04,   00,   $FF,    01  'Row 8  Take photo
        DATA  01,  05,   00,   $FF,    01  'Row 9  Take photo
        DATA  01,  06,   00,   $FF,    01  'Row 10  Take photo
        DATA  01,  07,   00,   $FF,    01  'Row 11 Take photo
        DATA  01,  08,   00,   $FF,    01  'Row 12 Take photo
        DATA  01,  09,   00,   $FF,    01  'Row 13  Take photo
        DATA  01,  10,   00,   $FF,    01  'Row 14  Take photo
        DATA  01,  11,   00,   $FF,    01  'Row 15  Take photo
        DATA  01,  12,   00,   $FF,    01  'Row 16  Take photo
        DATA  01,  13,   00,   $FF,    01  'Row 17  Take photo
        DATA  01,  14,   00,   $FF,    01  'Row 18  Take photo
        DATA  01,  15,   00,   $FF,    01  'Row 19  Take photo
        DATA  01,  16,   00,   $FF,    01  'Row 20  Take photo
        DATA  01,  17,   00,   $FF,    01  'Row 21  Take photo
        DATA  01,  18,   00,   $FF,    01  'Row 22  Take photo
        DATA  01,  19,   00,   $FF,    01  'Row 23  Take photo
        DATA  01,  20,   00,   $FF,    01  'Row 24  Take photo
        DATA  01,  21,   00,   $FF,    01  'Row 25  Take photo
        DATA  01,  22,   00,   $FF,    01  'Row 26  Take photo
        DATA  01,  23,   00,   $FF,    01  'Row 27  Take photo
        DATA  01,  23,   59,   $FF,    04  'Row 28  Reset the time to 0D 23H 59M

        ' take photo every hour to know whether changes are gradual or instant

INA219_test:
'note PLi2c = 8

' DEBUG CR,"--- INA219 ---",CR       'skip 2 lines between test

  INA219           CON $80                     'slave address of INA219
  INA219_config    CON $00
  INA219_shunt     CON $01
  INA219_bus       CON $02
  INA219_power     CON $03
  INA219_current   CON $04
  INA219_cal       CON $05


 ' I2COUT PLi2c, INA219,[INA219_config]

' I2COUT PLi2c, INA219,[INA219_config, %00111111, %11011111]                        'get config register
  I2COUT PLi2c, INA219,[INA219_config,$39,$FF]
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
  'DEBUG  "config =  ",BIN TempWord,"  ",DEC TempWord,CR

  I2COUT PLi2c, INA219,[INA219_cal,$10,$00]
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
  'DEBUG  "cal =     ",HEX TempWord,"  ",DEC TempWord,CR

  I2COUT PLi2c, INA219,[INA219_shunt]                         'get shunt voltage
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
  IF TempWord > 65000 THEN TempWord =0
  'DEBUG  "shunt =   ",HEX TempWord,"  ",DEC TempWord,CR



  I2COUT PLi2c, INA219,[INA219_bus]                            'get input buss voltage
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
   IF TempWord > 65000 THEN TempWord =0
  'DEBUG  "bus =     ",HEX TempWord,"  ",DEC TempWord,"  "
   TempWord1 = TempWord/2000                        ' print voltage dec
  DEBUG DEC TempWord1                  'for unit digit
  DEBUG "."
  TempWord =(TempWord - (TempWord1*2000))
  TempWord1 = TempWord/200                   'for 1/10 digit
  DEBUG DEC TempWord1
  TempWord =(TempWord - (TempWord1*200))
  TempWord1 = TempWord/20                     'for 1/100
  DEBUG DEC TempWord1
  TempWord =(TempWord - (TempWord1*20))
  TempWord1 = TempWord/2                      'for 1/1000
  DEBUG DEC TempWord1," Volts",CR


  I2COUT PLi2c, INA219,[INA219_power]
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
  'DEBUG  "power =   ",HEX TempWord,"  ",DEC TempWord,CR

  I2COUT PLi2c, INA219,[INA219_current]
  I2CIN  Pli2c, INA219,[TempWord.HIGHBYTE,TempWord.LOWBYTE]
  GOSUB WriteWordHex
  IF TempWord > 65000 THEN TempWord =0
  DEBUG  "current = ",HEX TempWord,"  ",DEC TempWord,"   "
  TempReg0 = TempWord/10                       'for unit ma digits
  DEBUG DEC TempReg0
  TempReg0 = TempWord//10                      'for 1/10 ma digit
  DEBUG ".",DEC TempReg0," ma",CR
  DEBUG CR
  RETURN

    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        '
'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
'  Routine to write a charator to be appended to the text file associated
'   with the photo.
'  Enter with:
'  BiosWord3 = contains the pointer to the next location in the input file
'  TempReg0 = with the charator to write.
'
WriteOneText:
    GOSUB getpointers
    I2COUT InternI2c, $A0 | TempReg2,xcounter.HIGHBYTE\xcounter.LOWBYTE, [TempReg0]  'Write to txt buf
    GOTO storepointers
'
'write word in Hex with space
'
WriteWordHex:
    GOSUB getpointers   '
    TempReg0 = TempWord.HIGHBYTE             'get the high byte
    TempReg0 = TempReg0>>4                    'place in lower nibble
    GOSUB WriteOneHex
    TempReg0 = TempWord.HIGHBYTE & $0F        'remove the upper nebble
    GOSUB WriteOneHex
    TempReg0 = TempWord.LOWBYTE             'get the high byte
    TempReg0 = TempReg0>>4                    'place in lower nibble
    GOSUB WriteOneHex
    TempReg0 = TempWord.LOWBYTE & $0F        'remove the upper nebble
    GOSUB WriteOneHex
    I2COUT InternI2c, $A0 | TempReg2,xcounter.HIGHBYTE\xcounter.LOWBYTE, [$20]  'Write space to txt buf
    GOTO Storepointers

WriteOneHex:
    TempReg0 = TempReg0 & $0F
    IF TempReg0 > 9 THEN TempReg0 = TempReg0+7 'point to ABCDEF
    TempReg0 = TempReg0+$30                  'make it ascii hex
    I2COUT InternI2c, $A0 | TempReg2,xcounter.HIGHBYTE\xcounter.LOWBYTE, [TempReg0]  'Write to txt buf
    PAUSE 10
    TempWord1 = TempWord1+1         'inc to point to next
    xcounter = xcounter+1           'point to next location
    RETURN

    '
    'enter with TempWord with number
    '
WriteBase10:
    GOSUB getpointers
    '
    TempReg0 = TempWord/10000                      'how many 10000
    GOSUB Base10support
    TempWord = TempWord - (TempReg0*10000)           'subt the number of 10000
    TempReg0 = TempWord/1000                       'how many 10000
    GOSUB Base10support
    TempWord = TempWord-(TempReg0*1000)            'sub the number of 1000
    TempReg0 = TempWord/100                        'how many 100
    GOSUB Base10support
    TempWord = TempWord - (TempReg0*100)           'subt number of 100
    TempReg0 = TempWord/10                         'how many 10
    GOSUB Base10support
    TempWord = TempWord - (TempReg0*10)
    TempReg0 = TempWord
    GOSUB Base10support
    GOTO commonreturn
    '
Base10support:
    xcounter = TempWord1 + $D000
    I2COUT InternI2c, $A0 | TempReg2,xcounter.HIGHBYTE\xcounter.LOWBYTE, [TempReg0+$30]  'Write to txt buf
    PAUSE 10
    TempWord1 = TempWord1+1                        'point to next location
    RETURN
    '
    ' common get pointers for routins
    '
getpointers:
    GET ActiveBank,TempReg2             'Set TempReg2 to the Active Bank 0 2 4
    GET BiosWord3,TempWord1.LOWBYTE
    GET BiosWord3h,TempWord1.HIGHBYTE
    xcounter = TempWord1 + $D000
    RETURN                              '
    '
    ' common store/replace pointers for next time
    '
storepointers:
    PAUSE 10
    TempWord1 = TempWord1+1         'inc to point to next
    xcounter = xcounter+1           'point to the next
    I2COUT InternI2c, $A0 | TempReg2,xcounter.HIGHBYTE\xcounter.LOWBYTE, [$00]  'Write to txt buf
    PAUSE 10
commonreturn:
    PUT BiosWord3,TempWord1.LOWBYTE
    PUT BiosWord3h,TempWord1.HIGHBYTE
    RETURN

             '
'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
